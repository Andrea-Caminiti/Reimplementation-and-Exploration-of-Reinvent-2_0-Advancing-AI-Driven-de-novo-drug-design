from RL.filters import IdenticalTopologicalScaffold, NoScaffoldFilter
from RL.parameters import ScaffoldParameters, ComponentParameters
from RL.scoring_functions import CustomProduct, CustomSum
from RL.score_components import TanimotoSimilarity, JaccardDistance, \
                                 CustomAlerts, QEDScore, \
                                 MatchingSubstructure, \
                                 MolWeight, PSA, \
                                 RotatableBonds, HBD_Lipinski, \
                                 NumRings
from RL.buffer import Buffer
from Prior.model import Prior

TRAIN_AGENT_CONFIG_FROM_SCRATCH_AURORA = {
    #Learning rate config
    'prior_path': None,
    'mode': 'adaptive',
    'max_v': 5e-3, 
    'min_v': 1e-5, 
    'step':  1, 
    'decay': 0.8, 
    'sample_size': 128,
    'patience_lr': 5, 
    'validation': False,
    #Trainer config
    'epochs': 100,
    'bs': 128, 
    'early_stop': True,
    'patience_train': 5,
    'save_path': 'Agents/Agent',
    'save_epochs': 3,
    'smiles_path': 'data\Aurora-A_dataset.smi',
    'starting_epoch': 1
}

TRAIN_AGENT_CONFIG_FROM_SCRATCH_BRAF = {
    #Learning rate config
    'prior_path': None,
    'mode': 'adaptive',
    'max_v': 5e-3, 
    'min_v': 1e-5, 
    'step':  1, 
    'decay': 0.8, 
    'sample_size': 128,
    'patience_lr': 5, 
    'validation': False,
    #Trainer config
    'epochs': 100,
    'bs': 128, 
    'early_stop': True,
    'patience_train': 5,
    'save_path': 'Agents/Agent',
    'save_epochs': 3,
    'smiles_path': 'data\B-raf_dataset.smi',
    'starting_epoch': 1
}

REINFORCEMENT_CONFIG_AURORA_AGENT_ITS_PRODUCT = {
    'name': 'REINFORCEMENT_CONFIG_AURORA_AGENT_ITS_PRODUCT',
    'batch_size': 64, 
    'sigma': 128,
    'f': IdenticalTopologicalScaffold(ScaffoldParameters('ITS', 0.4, 50, 0.4)),
    'scoring_func': CustomProduct([
        ComponentParameters(component_type = "tanimoto_similarity", 
                            name = "Tanimoto similarity",        
                            weight = 1,                          
                            model_path = None,                   
                            smiles = ["O=S(=O)(c3ccc(n1nc(cc1c2ccc(cc2)C)C(F)(F)F)cc3)N"],
                            smarts = [], 
                            specific_parameters = None),

        ComponentParameters(component_type = "qed_score", 
                            name = "QED",        
                            weight = 2,           
                            model_path = None,
                            smiles = None,
                            smarts = []),
        
        ComponentParameters(component_type = "custom_alerts",
                            name = "Custom alerts",              
                            weight = 1,                          
                            model_path = None, 
                            smiles = [],                  
                            smarts = [                            
                                "[*;r8]",
                                "[*;r9]",
                                "[*;r10]",
                                "[*;r11]",
                                "[*;r12]",
                                "[*;r13]",
                                "[*;r14]",
                                "[*;r15]",
                                "[*;r16]",
                                "[*;r17]",
                                "[#8][#8]",
                                "[#6;+]",
                                "[#16][#16]",
                                "[#7;!n][S;!$(S(=O)=O)]",
                                "[#7;!n][#7;!n]",
                                "C#C",
                                "C(=[O,S])[O,S]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]"
                            ],
                            specific_parameters = None)
    ]),
    'buffer': Buffer(128, [], 64, CustomProduct([
        ComponentParameters(component_type = "tanimoto_similarity", 
                            name = "Tanimoto similarity",        
                            weight = 1,                          
                            model_path = None, 
                            smarts = [],                  
                            smiles = ["O=S(=O)(c3ccc(n1nc(cc1c2ccc(cc2)C)C(F)(F)F)cc3)N"], 
                            specific_parameters = None),

        ComponentParameters(component_type = "qed_score", 
                            name = "QED",        
                            weight = 2,           
                            model_path = None,
                            smiles = None,
                            smarts = []),
        
        ComponentParameters(component_type = "custom_alerts",
                            name = "Custom alerts",              
                            weight = 1,                          
                            model_path = None,   
                            smiles = [],                
                            smarts = [                            
                                "[*;r8]",
                                "[*;r9]",
                                "[*;r10]",
                                "[*;r11]",
                                "[*;r12]",
                                "[*;r13]",
                                "[*;r14]",
                                "[*;r15]",
                                "[*;r16]",
                                "[*;r17]",
                                "[#8][#8]",
                                "[#6;+]",
                                "[#16][#16]",
                                "[#7;!n][S;!$(S(=O)=O)]",
                                "[#7;!n][#7;!n]",
                                "C#C",
                                "C(=[O,S])[O,S]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]"
                            ],
                            specific_parameters = None)]), 
                            Prior().load_prior('priors\RandomPrior')),
    'prior_path': 'priors\RandomPrior', 
    'agent_path': 'Agents\Agent.Aurora-A_dataset',
    'lr': 1e-5
}
REINFORCEMENT_CONFIG_BRAF_AGENT_ITS_PRODUCT = {
    'name': 'REINFORCEMENT_CONFIG_BRAF_AGENT_ITS_PRODUCT',
    'batch_size': 64, 
    'sigma': 128,
    'f': IdenticalTopologicalScaffold(ScaffoldParameters('ITS', 0.4, 50, 0.4)),
    'scoring_func': CustomProduct([
        ComponentParameters(component_type = "tanimoto_similarity", 
                            name = "Tanimoto similarity",        
                            weight = 1,                          
                            model_path = None,                   
                            smiles = ["O=S(=O)(c3ccc(n1nc(cc1c2ccc(cc2)C)C(F)(F)F)cc3)N"],
                            smarts = [], 
                            specific_parameters = None),

        ComponentParameters(component_type = "qed_score", 
                            name = "QED",        
                            weight = 2,           
                            model_path = None,
                            smiles = None,
                            smarts = []),
        
        ComponentParameters(component_type = "custom_alerts",
                            name = "Custom alerts",              
                            weight = 1,                          
                            model_path = None, 
                            smiles = [],                  
                            smarts = [                            
                                "[*;r8]",
                                "[*;r9]",
                                "[*;r10]",
                                "[*;r11]",
                                "[*;r12]",
                                "[*;r13]",
                                "[*;r14]",
                                "[*;r15]",
                                "[*;r16]",
                                "[*;r17]",
                                "[#8][#8]",
                                "[#6;+]",
                                "[#16][#16]",
                                "[#7;!n][S;!$(S(=O)=O)]",
                                "[#7;!n][#7;!n]",
                                "C#C",
                                "C(=[O,S])[O,S]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]"
                            ],
                            specific_parameters = None)
    ]),
    'buffer': Buffer(128, [], 64, CustomProduct([
        ComponentParameters(component_type = "tanimoto_similarity", 
                            name = "Tanimoto similarity",        
                            weight = 1,                          
                            model_path = None, 
                            smarts = [],           
                            smiles = ["O=S(=O)(c3ccc(n1nc(cc1c2ccc(cc2)C)C(F)(F)F)cc3)N"], 
                            specific_parameters = None),

        ComponentParameters(component_type = "qed_score", 
                            name = "QED",        
                            weight = 2,           
                            model_path = None,
                            smiles = None,
                            smarts = []),
        
        ComponentParameters(component_type = "custom_alerts",
                            name = "Custom alerts",              
                            weight = 1,                          
                            model_path = None,   
                            smiles = [],                
                            smarts = [                            
                                "[*;r8]",
                                "[*;r9]",
                                "[*;r10]",
                                "[*;r11]",
                                "[*;r12]",
                                "[*;r13]",
                                "[*;r14]",
                                "[*;r15]",
                                "[*;r16]",
                                "[*;r17]",
                                "[#8][#8]",
                                "[#6;+]",
                                "[#16][#16]",
                                "[#7;!n][S;!$(S(=O)=O)]",
                                "[#7;!n][#7;!n]",
                                "C#C",
                                "C(=[O,S])[O,S]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]"
                            ],
                            specific_parameters = None)]), 
                            Prior().load_prior('priors\RandomPrior')),
    'prior_path': 'priors\RandomPrior', 
    'agent_path': 'Agents\Agent.Aurora-A_dataset',
    'lr': 1e-5
}
REINFORCEMENT_CONFIG_RANDOM_AGENT_ITS_PRODUCT_EXPLORATION = {
    'name': 'REINFORCEMENT_CONFIG_RANDOM_AGENT_ITS_PRODUCT_EXPLORATION',
    'batch_size': 64, 
    'sigma': 128,
    'f': IdenticalTopologicalScaffold(ScaffoldParameters('ITS', 0.4, 50, 0.4)),
    'scoring_func': CustomProduct([
        ComponentParameters(component_type = "tanimoto_similarity", 
                            name = "Tanimoto similarity",        
                            weight = 1,                          
                            model_path = None,                   
                            smiles = ["O=S(=O)(c3ccc(n1nc(cc1c2ccc(cc2)C)C(F)(F)F)cc3)N"],
                            smarts = [], 
                            specific_parameters = None),

        ComponentParameters(component_type = "qed_score", 
                            name = "QED",        
                            weight = 2,           
                            model_path = None,
                            smiles = None,
                            smarts = []),
        
        ComponentParameters(component_type = "custom_alerts",
                            name = "Custom alerts",              
                            weight = 1,                          
                            model_path = None, 
                            smiles = [],                  
                            smarts = [                            
                                "[*;r8]",
                                "[*;r9]",
                                "[*;r10]",
                                "[*;r11]",
                                "[*;r12]",
                                "[*;r13]",
                                "[*;r14]",
                                "[*;r15]",
                                "[*;r16]",
                                "[*;r17]",
                                "[#8][#8]",
                                "[#6;+]",
                                "[#16][#16]",
                                "[#7;!n][S;!$(S(=O)=O)]",
                                "[#7;!n][#7;!n]",
                                "C#C",
                                "C(=[O,S])[O,S]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]"
                            ],
                            specific_parameters = None)
    ]),
    'buffer': Buffer(128, [], 64, CustomProduct([
        ComponentParameters(component_type = "tanimoto_similarity", 
                            name = "Tanimoto similarity",        
                            weight = 1,                          
                            model_path = None, 
                            smarts = [],                  
                            smiles = ["O=S(=O)(c3ccc(n1nc(cc1c2ccc(cc2)C)C(F)(F)F)cc3)N"], 
                            specific_parameters = None),

        ComponentParameters(component_type = "qed_score", 
                            name = "QED",        
                            weight = 2,           
                            model_path = None,
                            smiles = None,
                            smarts = []),
        
        ComponentParameters(component_type = "custom_alerts",
                            name = "Custom alerts",              
                            weight = 1,                          
                            model_path = None,   
                            smiles = [],                
                            smarts = [                            
                                "[*;r8]",
                                "[*;r9]",
                                "[*;r10]",
                                "[*;r11]",
                                "[*;r12]",
                                "[*;r13]",
                                "[*;r14]",
                                "[*;r15]",
                                "[*;r16]",
                                "[*;r17]",
                                "[#8][#8]",
                                "[#6;+]",
                                "[#16][#16]",
                                "[#7;!n][S;!$(S(=O)=O)]",
                                "[#7;!n][#7;!n]",
                                "C#C",
                                "C(=[O,S])[O,S]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#7;!n]",
                                "[#7;!n][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#16;!s]",
                                "[#8;!o][C;!$(C(=[O,N])[N,O])][#8;!o]",
                                "[#16;!s][C;!$(C(=[O,N])[N,O])][#16;!s]"
                            ],
                            specific_parameters = None)]), 
                            Prior().load_prior('priors\RandomPrior')),
    'prior_path': 'priors\RandomPrior', 
    'agent_path': 'priors\RandomPrior', 
    'lr': 1e-5
}
